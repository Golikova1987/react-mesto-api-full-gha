{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._url = options.baseUrl;\n    // this._headers = options.headers;\n    // this._authorization = options.headers.authorization;\n  }\n  //Проверка ответа сервера и преобразование из json\n  _getResponseData(res) {\n    if (!res.ok) {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n  }\n  //загрузка карточек с сервера\n  getInitialCards(token) {\n    return fetch(`${this._url}/cards`, {\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    }).then(this._getResponseData);\n  }\n  //загрузкам информации о пользователе с сервера\n  getInfo(token) {\n    return fetch(`${this._url}/users/me`, {\n      headers: {\n        // authorization: this._authorization\n        \"Authorization\": `Bearer ${token}`\n      }\n    }).then(this._getResponseData);\n  }\n  //сохранение отредактированного профиля на сервере\n  setUserInfo(data, token) {\n    return fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        name: data.name,\n        about: data.description\n      })\n    }).then(this._getResponseData);\n  }\n  //обновление аватара\n  setAvatar(data, token) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(this._getResponseData);\n  }\n  //добавление новой карточки\n  addCard(data, token) {\n    return fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"Authorization\": `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        name: data.mesto,\n        link: data.link\n      })\n    }).then(this._getResponseData);\n  }\n  //постановка лайка\n  addLike(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    }).then(this._getResponseData);\n  }\n  //удаление лайка\n  deleteLike(cardId, token) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    }).then(this._getResponseData);\n  }\n  //удаление карточек\n  deleteCard(cardId, token) {\n    return fetch(`${this._url}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    }).then(this._getResponseData);\n  }\n}\n//создание экземпляра класса Api\nconst api = new Api({\n  // baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-66\",\n  baseUrl: \"http://localhost:3000\"\n  // headers: {\n  //   authorization: \"4794d416-5184-43be-8376-438ba82ab5d1\",\n  //   \"Content-Type\": \"application/json\",\n  // }\n});\n\nexport default api;","map":{"version":3,"names":["Api","constructor","options","_url","baseUrl","_getResponseData","res","ok","Promise","reject","status","json","getInitialCards","token","fetch","headers","then","getInfo","setUserInfo","data","method","body","JSON","stringify","name","about","description","setAvatar","avatar","addCard","mesto","link","addLike","cardId","deleteLike","deleteCard","api"],"sources":["C:/Users/User/Desktop/dev/react-mesto-api-full-gha/frontend/src/utils/api.js"],"sourcesContent":["class Api {\r\n  constructor(options) {\r\n    this._url = options.baseUrl;\r\n    // this._headers = options.headers;\r\n    // this._authorization = options.headers.authorization;\r\n  }\r\n//Проверка ответа сервера и преобразование из json\r\n  _getResponseData(res) {\r\n    if (!res.ok) {\r\n        return Promise.reject(`Ошибка: ${res.status}`); \r\n    }\r\n    return res.json();\r\n}\r\n//загрузка карточек с сервера\r\n  getInitialCards(token) {\r\n    return fetch(`${this._url}/cards`, {\r\n      headers: {\r\n        \"Authorization\" : `Bearer ${token}`\r\n      }\r\n   })\r\n   .then(this._getResponseData)\r\n  }\r\n//загрузкам информации о пользователе с сервера\r\n  getInfo(token) {\r\n    return fetch(`${this._url}/users/me`, {\r\n      headers: {\r\n        // authorization: this._authorization\r\n        \"Authorization\" : `Bearer ${token}`\r\n      }\r\n    })\r\n    .then(this._getResponseData)\r\n  }\r\n//сохранение отредактированного профиля на сервере\r\n  setUserInfo(data, token) { \r\n    return fetch(`${this._url}/users/me`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        \"Authorization\" : `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify({\r\n        name: data.name,\r\n        about: data.description,\r\n      })\r\n    })\r\n    .then(this._getResponseData)\r\n  }\r\n//обновление аватара\r\n  setAvatar(data, token) {\r\n    return fetch(`${this._url}/users/me/avatar`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        \"Authorization\" : `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify({\r\n        avatar: data.avatar,\r\n      })\r\n    })\r\n    .then(this._getResponseData)\r\n  }\r\n//добавление новой карточки\r\n  addCard(data, token) {\r\n    return fetch(`${this._url}/cards`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        \"Authorization\" : `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify({\r\n        name: data.mesto,\r\n        link: data.link,\r\n      })\r\n    })\r\n    .then(this._getResponseData)\r\n  }\r\n//постановка лайка\r\n  addLike(cardId, ) {\r\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        \"Authorization\" : `Bearer ${token}`\r\n      } \r\n    })\r\n    .then(this._getResponseData)\r\n  }\r\n  //удаление лайка\r\n  deleteLike(cardId, token) {\r\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        \"Authorization\" : `Bearer ${token}`\r\n      } \r\n    })\r\n    .then(this._getResponseData) \r\n  }\r\n//удаление карточек\r\n  deleteCard(cardId, token) {\r\n    return fetch(`${this._url}/cards/${cardId}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        \"Authorization\" : `Bearer ${token}`\r\n      }\r\n    })\r\n    .then(this._getResponseData)\r\n  }\r\n\r\n}\r\n//создание экземпляра класса Api\r\nconst api = new Api({\r\n  // baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-66\",\r\n  baseUrl: \"http://localhost:3000\",\r\n  // headers: {\r\n  //   authorization: \"4794d416-5184-43be-8376-438ba82ab5d1\",\r\n  //   \"Content-Type\": \"application/json\",\r\n  // }\r\n});\r\n\r\nexport default api;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"const baseUrl = 'https://auth.nomoreparties.co';\nconst getResponseData = res => {\n  if (res.ok) return res.json();\n  return Promise.reject(`Ошибка ${res.status}`);\n};\nconst registration = (email, password) => {\n  return fetch(`${baseUrl}/signup`, {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => getResponseData(res));\n};\nconst authorization = (email, password) => {\n  return fetch(`${baseUrl}/signin`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => getResponseData(res)).then(data => {\n    if (data.token) {\n      localStorage.setItem('jwt', data.token);\n      return data;\n    }\n  });\n};\nconst getС = token => {\n  return fetch(`${baseUrl}/users/me`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(res => getResponseData(res));\n};\nexport const auth = {\n  registration,\n  authorization,\n  getUsetData\n};","map":{"version":3,"names":["baseUrl","getResponseData","res","ok","json","Promise","reject","status","registration","email","password","fetch","method","headers","body","JSON","stringify","then","authorization","data","token","localStorage","setItem","getС","Authorization","auth","getUsetData"],"sources":["C:/Users/User/Desktop/dev/react-mesto-auth/src/utils/auth.js"],"sourcesContent":["const baseUrl ='https://auth.nomoreparties.co'\r\n\r\nconst getResponseData = (res) => {\r\n  if (res.ok) return res.json();\r\n  return Promise.reject(`Ошибка ${res.status}`);\r\n}\r\n\r\nconst registration = (email, password) => {\r\n  return fetch(`${baseUrl}/signup`, {\r\n    method: 'POST',\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify({ email, password })\r\n  })\r\n    .then((res) => getResponseData(res))\r\n};\r\n\r\nconst authorization = (email, password) => {\r\n  return fetch(`${baseUrl}/signin`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ email, password }),\r\n  })\r\n    .then((res) => getResponseData(res))\r\n    .then((data) => {\r\n      if (data.token) {\r\n        localStorage.setItem('jwt', data.token);\r\n        return data;\r\n      }\r\n    });\r\n};\r\n\r\nconst getС = (token) => {\r\n  return fetch(`${baseUrl}/users/me`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  })\r\n    .then((res) => getResponseData(res))\r\n};\r\n\r\nexport const auth = {\r\n  registration,\r\n  authorization,\r\n  getUsetData,\r\n};"],"mappings":"AAAA,MAAMA,OAAO,GAAE,+BAA+B;AAE9C,MAAMC,eAAe,GAAIC,GAAG,IAAK;EAC/B,IAAIA,GAAG,CAACC,EAAE,EAAE,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC;EAC7B,OAAOC,OAAO,CAACC,MAAM,CAAE,UAASJ,GAAG,CAACK,MAAO,EAAC,CAAC;AAC/C,CAAC;AAED,MAAMC,YAAY,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EACxC,OAAOC,KAAK,CAAE,GAAEX,OAAQ,SAAQ,EAAE;IAChCY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC,CACCO,IAAI,CAAEf,GAAG,IAAKD,eAAe,CAACC,GAAG,CAAC,CAAC;AACxC,CAAC;AAED,MAAMgB,aAAa,GAAGA,CAACT,KAAK,EAAEC,QAAQ,KAAK;EACzC,OAAOC,KAAK,CAAE,GAAEX,OAAQ,SAAQ,EAAE;IAChCY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC,CACCO,IAAI,CAAEf,GAAG,IAAKD,eAAe,CAACC,GAAG,CAAC,CAAC,CACnCe,IAAI,CAAEE,IAAI,IAAK;IACd,IAAIA,IAAI,CAACC,KAAK,EAAE;MACdC,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEH,IAAI,CAACC,KAAK,CAAC;MACvC,OAAOD,IAAI;IACb;EACF,CAAC,CAAC;AACN,CAAC;AAED,MAAMI,IAAI,GAAIH,KAAK,IAAK;EACtB,OAAOT,KAAK,CAAE,GAAEX,OAAQ,WAAU,EAAE;IAClCY,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCW,aAAa,EAAG,UAASJ,KAAM;IACjC;EACF,CAAC,CAAC,CACCH,IAAI,CAAEf,GAAG,IAAKD,eAAe,CAACC,GAAG,CAAC,CAAC;AACxC,CAAC;AAED,OAAO,MAAMuB,IAAI,GAAG;EAClBjB,YAAY;EACZU,aAAa;EACbQ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}